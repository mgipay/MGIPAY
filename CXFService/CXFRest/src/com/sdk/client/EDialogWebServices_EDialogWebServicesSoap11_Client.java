package com.sdk.client;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.net.URL;
import java.util.List;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import com.google.gson.Gson;

/**
 * This class was generated by Apache CXF 2.7.4 2013-04-18T16:51:59.112-04:00
 * Generated source version: 2.7.4
 * 
 */
public final class EDialogWebServices_EDialogWebServicesSoap11_Client {

	private static final QName SERVICE_NAME = new QName(
			"uri:ws.sdk.edialog.com", "SdkService");

	public EDialogWebServices_EDialogWebServicesSoap11_Client() {

	}

	public String sendProofMessageForSignUP(String messageName,
			List<String> replacementAddressList,
			List<PropertyType> propertyTypeList) {
		URL wsdlURL = SdkService.WSDL_LOCATION;
		String _sendProofMessage__return = null;
		SdkService ss = new SdkService(wsdlURL, SERVICE_NAME);
		EDialogWebServices port = ss.getEDialogWebServicesSoap11();
		BindingProvider bindingProvider = (BindingProvider) port;
		bindingProvider.getRequestContext().put(
				BindingProvider.USERNAME_PROPERTY, "moneygramws");
		bindingProvider.getRequestContext().put(
				BindingProvider.PASSWORD_PROPERTY, "WQiyP1c0X");
		/*
		 * String messageName = "EXAMPLETRIGGER";
		 * 
		 * List<String> replacementAddressList = new ArrayList<String>();
		 * replacementAddressList.add(sendProofInputBean.getCustomerEmail());
		 * 
		 * List<PropertyType> propertyTypeList = new ArrayList<PropertyType>();
		 * 
		 * PropertyType propertyType = new PropertyType();
		 * propertyType.setName("EMAIL");
		 * propertyType.setValue(sendProofInputBean.getCustomerEmail());
		 * 
		 * PropertyType propertyType2 = new PropertyType();
		 * propertyType2.setName("TEMPZIP");
		 * propertyType2.setValue(sendProofInputBean.getZipCode());
		 * 
		 * propertyTypeList.add(propertyType);
		 * propertyTypeList.add(propertyType2);
		 */
		_sendProofMessage__return = port.sendProofMessage(messageName,
				replacementAddressList, propertyTypeList);

		return new Gson().toJson(_sendProofMessage__return);
	}

}
