package com.paypal.adaptivepayment.client;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.ws.Binding;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.handler.MessageContext;

import org.apache.log4j.Logger;

import com.mgi.paypal.util.PropertyUtil;
import com.mgi.paypal.util.SOAPMessageLoggingHandler;
import com.mgi.paypal.util.StringOutputStream;

/**
 * This class was generated by Apache CXF 2.7.3 2013-03-01T15:56:40.901+05:30
 * Generated source version: 2.7.3
 * 
 */
public final class AdaptivePaymentsPortType_AdaptivePaymentsSOAP11Http_Client {
	public static OutputStream output = new StringOutputStream();

	public AdaptivePaymentsPortType_AdaptivePaymentsSOAP11Http_Client() {

	}
	private static Logger LOGGER = Logger.getLogger(AdaptivePaymentsPortType_AdaptivePaymentsSOAP11Http_Client.class);
	public GetUserLimitsResponse getUserLimit(
			GetUserLimitsRequest getUserLimitsRequest)
			throws java.lang.Exception {
		AdaptivePaymentsPortType port = getPort();

		com.paypal.adaptivepayment.client.GetUserLimitsResponse _getUserLimits__return = null;
		try {
			_getUserLimits__return = port.getUserLimits(getUserLimitsRequest);

		} catch (PPFaultMessage objPpFaultMessage) {
			objPpFaultMessage.printStackTrace();
			FaultMessage objFaultMessage = objPpFaultMessage.getFaultInfo();
			ErrorData ed = objFaultMessage.getError().get(0);
			LOGGER.debug("Expected exception: PPFaultMessage has occurred.");
			LOGGER.debug("Error Code: " + ed.getErrorId()
					+ " FaultMessage" + ed.getMessage());
			LOGGER.debug(objPpFaultMessage.toString());
		}

		return _getUserLimits__return;
	}

	public PayResponse getPay(PayRequest payRequest, String token)
			throws java.lang.Exception {
		AdaptivePaymentsPortType port = getPortForPay(token);

		com.paypal.adaptivepayment.client.PayResponse _PayResponse = null;
		try {
			_PayResponse = port.pay(payRequest);

		} catch (PPFaultMessage objPpFaultMessage) {
			objPpFaultMessage.printStackTrace();
			FaultMessage objFaultMessage = objPpFaultMessage.getFaultInfo();
			ErrorData ed = objFaultMessage.getError().get(0);
			LOGGER.debug("Expected exception: PPFaultMessage has occurred.");
			LOGGER.debug("Error Code: " + ed.getErrorId()
					+ " FaultMessage" + ed.getMessage());
			LOGGER.debug(objPpFaultMessage.toString());
		}

		return _PayResponse;
	}

	private AdaptivePaymentsPortType getPortForPay(String token) {
		setCredentialsforPay();
		// String wsdlURL
		// ="https://svcs.sandbox.paypal.com/AdaptivePayments/Pay";
		String wsdlURL = PropertyUtil.constantFromProperties
				.getString("ADAPTIVE_PAYMENTS_PAY_URL");
		// "https://api.stage2cp07.stage.paypal.com/AdaptivePayments/Pay";

		AdaptivePayments ss = new AdaptivePayments();
		AdaptivePaymentsPortType port = ss.getAdaptivePaymentsSOAP11Http();
		BindingProvider bd = (BindingProvider) port;
		bd.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
				wsdlURL);
		// addLogHandler(bd);
		// setupHeaders(bd);
		setupHeadersForPay(bd, token);
		return port;
	}

	private AdaptivePaymentsPortType getPort() {
		// String wsdlURL =
		// "https://svcs.sandbox.paypal.com/AdaptivePayments/GetUserLimits";
		setCredentials();
		//String wsdlURL ="https://api.stage2cp07.stage.paypal.com:9090/AdaptivePayments/GetUserLimits";
		String wsdlURL =PropertyUtil.constantFromProperties
				.getString("ADAPTIVE_PAYMENTS_GET_USERLIMIT_URL");
		
		AdaptivePayments ss = new AdaptivePayments();
		AdaptivePaymentsPortType port = ss.getAdaptivePaymentsSOAP11Http();
		BindingProvider bd = (BindingProvider) port;
		bd.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
				wsdlURL);
		addLogHandler(bd);
		setupHeaders(bd);
		return port;
	}

	private  void setCredentials() {

		System.setProperty("javax.net.ssl.trustStoreType",
				PropertyUtil.constantFromProperties.getString("trustStoreType"));
		System.setProperty("javax.net.ssl.trustStore",
				PropertyUtil.constantFromProperties.getString("trustStore"));
		System.setProperty("javax.net.ssl.trustStorePassword",
				PropertyUtil.constantFromProperties.getString("trustStorePassword"));
		System.setProperty("javax.net.ssl.keyStoreType",
				PropertyUtil.constantFromProperties.getString("keyStoreType"));
		System.setProperty("javax.net.ssl.keyStore",
				PropertyUtil.constantFromProperties.getString("keyStore"));
		System.setProperty("javax.net.ssl.keyStorePassword",
				PropertyUtil.constantFromProperties.getString("keyStorePassword"));

/*		 System.setProperty("javax.net.ssl.trustStoreType", "JKS");
		 System.setProperty("javax.net.ssl.trustStore", "C:/Documents and Settings/va72/Desktop/Cert1/truststore.jks");
		 System.setProperty("javax.net.ssl.trustStorePassword", "changeit");
		 System.setProperty("javax.net.ssl.keyStoreType", "pkcs12");
		System.setProperty("javax.net.ssl.keyStore","C:/Documents and Settings/va72/Desktop/Cert1/paypal_cert.p12");
		 System.setProperty("javax.net.ssl.keyStore","etc/tomcat7/paypal_cert.p12");
		 System.setProperty("javax.net.ssl.keyStorePassword", "prompt");*/

	}
	
	private  void setCredentialsforPay() {

		System.setProperty("javax.net.ssl.trustStoreType",
				PropertyUtil.constantFromProperties.getString("trustStoreType"));
		System.setProperty("javax.net.ssl.trustStore",
				PropertyUtil.constantFromProperties.getString("trustStoreforPay"));
		System.setProperty("javax.net.ssl.trustStorePassword",
				PropertyUtil.constantFromProperties.getString("trustStorePassword"));
		System.setProperty("javax.net.ssl.keyStoreType",
				PropertyUtil.constantFromProperties.getString("keyStoreType"));
		System.setProperty("javax.net.ssl.keyStore",
				PropertyUtil.constantFromProperties.getString("keyStoreforPay"));
		System.setProperty("javax.net.ssl.keyStorePassword",
				PropertyUtil.constantFromProperties.getString("keyStorePassword"));

	
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static void addLogHandler(BindingProvider bp) {
		Binding binding = bp.getBinding();
		List handlerList = binding.getHandlerChain();
		if (handlerList == null)
			handlerList = new ArrayList();
		SOAPMessageLoggingHandler loggingHandler = new SOAPMessageLoggingHandler(
				output);
		handlerList.add(loggingHandler);
		binding.setHandlerChain(handlerList);

	}

	public  void setupHeaders(BindingProvider bp) {

		Map<String, List<String>> headers = new HashMap<String, List<String>>();
		headers.put("X-PAYPAL-SECURITY-PASSWORD",
				Collections.singletonList(PropertyUtil.constantFromProperties.getString("X_PAYPAL_SECURITY_PASSWORD")));
		headers.put("X-PAYPAL-APPLICATION-ID",
				Collections.singletonList(PropertyUtil.constantFromProperties.getString("X_PAYPAL_APPLICATION_ID")));
		headers.put("X-PAYPAL-SECURITY-USERID", Collections
				.singletonList(PropertyUtil.constantFromProperties.getString("X_PAYPAL_SECURITY_USERID")));
		
		/*headers.put("X-PAYPAL-SECURITY-USERID", Collections.singletonList("mgi_fundsout_test_api1.moneygram.com"));
		headers.put("X-PAYPAL-SECURITY-PASSWORD", Collections.singletonList("SSARWLBQRLFMDLHH"));
	    headers.put("X-PAYPAL-APPLICATION-ID", Collections.singletonList("APP-1JE4291016473214C"));
		*/
		bp.getRequestContext()
				.put(MessageContext.HTTP_REQUEST_HEADERS, headers);

	}

	public  void setupHeadersForPay(BindingProvider bp, String token) {

		Map<String, List<String>> headers = new HashMap<String, List<String>>();
		headers.put("X-PAYPAL-SECURITY-PASSWORD",
				Collections.singletonList(PropertyUtil.constantFromProperties.getString("X_PAYPAL_SECURITY_PASSWORD")));

		headers.put("X-PAYPAL-APPLICATION-ID",
				Collections.singletonList(PropertyUtil.constantFromProperties.getString("X_PAYPAL_APPLICATION_ID")));
		headers.put("X-PAYPAL-SECURITY-USERID", Collections
				.singletonList(PropertyUtil.constantFromProperties.getString("X_PAYPAL_SECURITY_USERID")));

		headers.put(
				"X-PAYPAL-SECONDARY-AUTH-UNIVERSAL-TOKEN ",
				Collections
						.singletonList(token));
		bp.getRequestContext()
				.put(MessageContext.HTTP_REQUEST_HEADERS, headers);

	}
}
